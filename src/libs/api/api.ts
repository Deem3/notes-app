/* tslint:disable */
/* eslint-disable */
/**
 * spa-server-template
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface GenericError
 */
export interface GenericError {
    /**
     * 
     * @type {string}
     * @memberof GenericError
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface GetAllNotesModel
 */
export interface GetAllNotesModel {
    /**
     * 
     * @type {string}
     * @memberof GetAllNotesModel
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof GetAllNotesModel
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof GetAllNotesModel
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof GetAllNotesModel
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof GetAllNotesModel
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof GetAllNotesModel
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface ResponseCreateNote
 */
export interface ResponseCreateNote {
    /**
     * 
     * @type {GenericError}
     * @memberof ResponseCreateNote
     */
    'error'?: GenericError;
    /**
     * 
     * @type {ResponseCreateNoteData}
     * @memberof ResponseCreateNote
     */
    'data'?: ResponseCreateNoteData;
}
/**
 * 
 * @export
 * @interface ResponseCreateNoteData
 */
export interface ResponseCreateNoteData {
    /**
     * 
     * @type {string}
     * @memberof ResponseCreateNoteData
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface ResponseCreateUser
 */
export interface ResponseCreateUser {
    /**
     * 
     * @type {GenericError}
     * @memberof ResponseCreateUser
     */
    'error'?: GenericError;
    /**
     * 
     * @type {ResponseCreateNoteData}
     * @memberof ResponseCreateUser
     */
    'data'?: ResponseCreateNoteData;
}
/**
 * 
 * @export
 * @interface ResponseDeleteNote
 */
export interface ResponseDeleteNote {
    /**
     * 
     * @type {GenericError}
     * @memberof ResponseDeleteNote
     */
    'error'?: GenericError;
    /**
     * 
     * @type {ResponseDeleteNoteData}
     * @memberof ResponseDeleteNote
     */
    'data'?: ResponseDeleteNoteData;
}
/**
 * 
 * @export
 * @interface ResponseDeleteNoteData
 */
export interface ResponseDeleteNoteData {
    /**
     * 
     * @type {string}
     * @memberof ResponseDeleteNoteData
     */
    'state': string;
}
/**
 * 
 * @export
 * @interface ResponseGetAllNotes
 */
export interface ResponseGetAllNotes {
    /**
     * 
     * @type {GenericError}
     * @memberof ResponseGetAllNotes
     */
    'error'?: GenericError;
    /**
     * 
     * @type {Array<GetAllNotesModel>}
     * @memberof ResponseGetAllNotes
     */
    'data'?: Array<GetAllNotesModel>;
}
/**
 * 
 * @export
 * @interface ResponseGetNote
 */
export interface ResponseGetNote {
    /**
     * 
     * @type {GenericError}
     * @memberof ResponseGetNote
     */
    'error'?: GenericError;
    /**
     * 
     * @type {ResponseGetNoteData}
     * @memberof ResponseGetNote
     */
    'data'?: ResponseGetNoteData;
}
/**
 * 
 * @export
 * @interface ResponseGetNoteData
 */
export interface ResponseGetNoteData {
    /**
     * 
     * @type {string}
     * @memberof ResponseGetNoteData
     */
    'userId': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGetNoteData
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGetNoteData
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGetNoteData
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGetNoteData
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGetNoteData
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface ResponseGetUser
 */
export interface ResponseGetUser {
    /**
     * 
     * @type {GenericError}
     * @memberof ResponseGetUser
     */
    'error'?: GenericError;
    /**
     * 
     * @type {ResponseGetUserData}
     * @memberof ResponseGetUser
     */
    'data'?: ResponseGetUserData;
}
/**
 * 
 * @export
 * @interface ResponseGetUserData
 */
export interface ResponseGetUserData {
    /**
     * 
     * @type {string}
     * @memberof ResponseGetUserData
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGetUserData
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGetUserData
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof ResponseGetUserData
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface ResponseUpdateNote
 */
export interface ResponseUpdateNote {
    /**
     * 
     * @type {GenericError}
     * @memberof ResponseUpdateNote
     */
    'error'?: GenericError;
    /**
     * 
     * @type {ResponseCreateNoteData}
     * @memberof ResponseUpdateNote
     */
    'data'?: ResponseCreateNoteData;
}
/**
 * 
 * @export
 * @interface RestCreateNote
 */
export interface RestCreateNote {
    /**
     * 
     * @type {string}
     * @memberof RestCreateNote
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof RestCreateNote
     */
    'content': string;
    /**
     * 
     * @type {string}
     * @memberof RestCreateNote
     */
    'userId': string;
}
/**
 * 
 * @export
 * @interface RestCreateUser
 */
export interface RestCreateUser {
    /**
     * 
     * @type {string}
     * @memberof RestCreateUser
     */
    'firstName': string;
    /**
     * 
     * @type {string}
     * @memberof RestCreateUser
     */
    'lastName': string;
    /**
     * 
     * @type {string}
     * @memberof RestCreateUser
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RestCreateUser
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface RestGetUser
 */
export interface RestGetUser {
    /**
     * 
     * @type {string}
     * @memberof RestGetUser
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RestGetUser
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface RestUpdateNote
 */
export interface RestUpdateNote {
    /**
     * 
     * @type {string}
     * @memberof RestUpdateNote
     */
    'title'?: string;
    /**
     * 
     * @type {string}
     * @memberof RestUpdateNote
     */
    'content'?: string;
    /**
     * 
     * @type {string}
     * @memberof RestUpdateNote
     */
    'id': string;
}

/**
 * CreateNoteApi - axios parameter creator
 * @export
 */
export const CreateNoteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {RestCreateNote} restCreateNote 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNote: async (restCreateNote: RestCreateNote, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restCreateNote' is not null or undefined
            assertParamExists('createNote', 'restCreateNote', restCreateNote)
            const localVarPath = `/note/createNote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(restCreateNote, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CreateNoteApi - functional programming interface
 * @export
 */
export const CreateNoteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CreateNoteApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {RestCreateNote} restCreateNote 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createNote(restCreateNote: RestCreateNote, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseCreateNote>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createNote(restCreateNote, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CreateNoteApi - factory interface
 * @export
 */
export const CreateNoteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CreateNoteApiFp(configuration)
    return {
        /**
         * 
         * @param {RestCreateNote} restCreateNote 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createNote(restCreateNote: RestCreateNote, options?: any): AxiosPromise<ResponseCreateNote> {
            return localVarFp.createNote(restCreateNote, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CreateNoteApi - interface
 * @export
 * @interface CreateNoteApi
 */
export interface CreateNoteApiInterface {
    /**
     * 
     * @param {RestCreateNote} restCreateNote 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreateNoteApiInterface
     */
    createNote(restCreateNote: RestCreateNote, options?: AxiosRequestConfig): AxiosPromise<ResponseCreateNote>;

}

/**
 * CreateNoteApi - object-oriented interface
 * @export
 * @class CreateNoteApi
 * @extends {BaseAPI}
 */
export class CreateNoteApi extends BaseAPI implements CreateNoteApiInterface {
    /**
     * 
     * @param {RestCreateNote} restCreateNote 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreateNoteApi
     */
    public createNote(restCreateNote: RestCreateNote, options?: AxiosRequestConfig) {
        return CreateNoteApiFp(this.configuration).createNote(restCreateNote, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DeleteNoteApi - axios parameter creator
 * @export
 */
export const DeleteNoteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNote: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteNote', 'id', id)
            const localVarPath = `/note/deleteNote/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DeleteNoteApi - functional programming interface
 * @export
 */
export const DeleteNoteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DeleteNoteApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteNote(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseDeleteNote>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteNote(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DeleteNoteApi - factory interface
 * @export
 */
export const DeleteNoteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DeleteNoteApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteNote(id: string, options?: any): AxiosPromise<ResponseDeleteNote> {
            return localVarFp.deleteNote(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DeleteNoteApi - interface
 * @export
 * @interface DeleteNoteApi
 */
export interface DeleteNoteApiInterface {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeleteNoteApiInterface
     */
    deleteNote(id: string, options?: AxiosRequestConfig): AxiosPromise<ResponseDeleteNote>;

}

/**
 * DeleteNoteApi - object-oriented interface
 * @export
 * @class DeleteNoteApi
 * @extends {BaseAPI}
 */
export class DeleteNoteApi extends BaseAPI implements DeleteNoteApiInterface {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DeleteNoteApi
     */
    public deleteNote(id: string, options?: AxiosRequestConfig) {
        return DeleteNoteApiFp(this.configuration).deleteNote(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GetAllNotesApi - axios parameter creator
 * @export
 */
export const GetAllNotesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllNotes: async (userId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getAllNotes', 'userId', userId)
            const localVarPath = `/note/getAllNotes/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GetAllNotesApi - functional programming interface
 * @export
 */
export const GetAllNotesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GetAllNotesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllNotes(userId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseGetAllNotes>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllNotes(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GetAllNotesApi - factory interface
 * @export
 */
export const GetAllNotesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GetAllNotesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllNotes(userId: string, options?: any): AxiosPromise<ResponseGetAllNotes> {
            return localVarFp.getAllNotes(userId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GetAllNotesApi - interface
 * @export
 * @interface GetAllNotesApi
 */
export interface GetAllNotesApiInterface {
    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetAllNotesApiInterface
     */
    getAllNotes(userId: string, options?: AxiosRequestConfig): AxiosPromise<ResponseGetAllNotes>;

}

/**
 * GetAllNotesApi - object-oriented interface
 * @export
 * @class GetAllNotesApi
 * @extends {BaseAPI}
 */
export class GetAllNotesApi extends BaseAPI implements GetAllNotesApiInterface {
    /**
     * 
     * @param {string} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetAllNotesApi
     */
    public getAllNotes(userId: string, options?: AxiosRequestConfig) {
        return GetAllNotesApiFp(this.configuration).getAllNotes(userId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GetNotesApi - axios parameter creator
 * @export
 */
export const GetNotesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotes: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getNotes', 'id', id)
            const localVarPath = `/note/getNotes/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GetNotesApi - functional programming interface
 * @export
 */
export const GetNotesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GetNotesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNotes(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseGetNote>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNotes(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GetNotesApi - factory interface
 * @export
 */
export const GetNotesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GetNotesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNotes(id: string, options?: any): AxiosPromise<ResponseGetNote> {
            return localVarFp.getNotes(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GetNotesApi - interface
 * @export
 * @interface GetNotesApi
 */
export interface GetNotesApiInterface {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetNotesApiInterface
     */
    getNotes(id: string, options?: AxiosRequestConfig): AxiosPromise<ResponseGetNote>;

}

/**
 * GetNotesApi - object-oriented interface
 * @export
 * @class GetNotesApi
 * @extends {BaseAPI}
 */
export class GetNotesApi extends BaseAPI implements GetNotesApiInterface {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetNotesApi
     */
    public getNotes(id: string, options?: AxiosRequestConfig) {
        return GetNotesApiFp(this.configuration).getNotes(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GetUserApi - axios parameter creator
 * @export
 */
export const GetUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {RestCreateUser} restCreateUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser: async (restCreateUser: RestCreateUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restCreateUser' is not null or undefined
            assertParamExists('createUser', 'restCreateUser', restCreateUser)
            const localVarPath = `/user/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(restCreateUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RestGetUser} restGetUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (restGetUser: RestGetUser, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restGetUser' is not null or undefined
            assertParamExists('getUser', 'restGetUser', restGetUser)
            const localVarPath = `/user/getUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(restGetUser, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GetUserApi - functional programming interface
 * @export
 */
export const GetUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GetUserApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {RestCreateUser} restCreateUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUser(restCreateUser: RestCreateUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseCreateUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUser(restCreateUser, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {RestGetUser} restGetUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(restGetUser: RestGetUser, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseGetUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(restGetUser, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GetUserApi - factory interface
 * @export
 */
export const GetUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GetUserApiFp(configuration)
    return {
        /**
         * 
         * @param {RestCreateUser} restCreateUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUser(restCreateUser: RestCreateUser, options?: any): AxiosPromise<ResponseCreateUser> {
            return localVarFp.createUser(restCreateUser, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RestGetUser} restGetUser 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(restGetUser: RestGetUser, options?: any): AxiosPromise<ResponseGetUser> {
            return localVarFp.getUser(restGetUser, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GetUserApi - interface
 * @export
 * @interface GetUserApi
 */
export interface GetUserApiInterface {
    /**
     * 
     * @param {RestCreateUser} restCreateUser 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetUserApiInterface
     */
    createUser(restCreateUser: RestCreateUser, options?: AxiosRequestConfig): AxiosPromise<ResponseCreateUser>;

    /**
     * 
     * @param {RestGetUser} restGetUser 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetUserApiInterface
     */
    getUser(restGetUser: RestGetUser, options?: AxiosRequestConfig): AxiosPromise<ResponseGetUser>;

}

/**
 * GetUserApi - object-oriented interface
 * @export
 * @class GetUserApi
 * @extends {BaseAPI}
 */
export class GetUserApi extends BaseAPI implements GetUserApiInterface {
    /**
     * 
     * @param {RestCreateUser} restCreateUser 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetUserApi
     */
    public createUser(restCreateUser: RestCreateUser, options?: AxiosRequestConfig) {
        return GetUserApiFp(this.configuration).createUser(restCreateUser, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RestGetUser} restGetUser 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetUserApi
     */
    public getUser(restGetUser: RestGetUser, options?: AxiosRequestConfig) {
        return GetUserApiFp(this.configuration).getUser(restGetUser, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * GetUserByIdApi - axios parameter creator
 * @export
 */
export const GetUserByIdApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUserById', 'id', id)
            const localVarPath = `/user/getUserById`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwt required

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GetUserByIdApi - functional programming interface
 * @export
 */
export const GetUserByIdApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = GetUserByIdApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserById(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseGetUser>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * GetUserByIdApi - factory interface
 * @export
 */
export const GetUserByIdApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = GetUserByIdApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserById(id: string, options?: any): AxiosPromise<ResponseGetUser> {
            return localVarFp.getUserById(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GetUserByIdApi - interface
 * @export
 * @interface GetUserByIdApi
 */
export interface GetUserByIdApiInterface {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetUserByIdApiInterface
     */
    getUserById(id: string, options?: AxiosRequestConfig): AxiosPromise<ResponseGetUser>;

}

/**
 * GetUserByIdApi - object-oriented interface
 * @export
 * @class GetUserByIdApi
 * @extends {BaseAPI}
 */
export class GetUserByIdApi extends BaseAPI implements GetUserByIdApiInterface {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GetUserByIdApi
     */
    public getUserById(id: string, options?: AxiosRequestConfig) {
        return GetUserByIdApiFp(this.configuration).getUserById(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UpdateNoteApi - axios parameter creator
 * @export
 */
export const UpdateNoteApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {RestUpdateNote} restUpdateNote 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNote: async (restUpdateNote: RestUpdateNote, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'restUpdateNote' is not null or undefined
            assertParamExists('updateNote', 'restUpdateNote', restUpdateNote)
            const localVarPath = `/note/updateNote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(restUpdateNote, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UpdateNoteApi - functional programming interface
 * @export
 */
export const UpdateNoteApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UpdateNoteApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {RestUpdateNote} restUpdateNote 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateNote(restUpdateNote: RestUpdateNote, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseUpdateNote>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateNote(restUpdateNote, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UpdateNoteApi - factory interface
 * @export
 */
export const UpdateNoteApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UpdateNoteApiFp(configuration)
    return {
        /**
         * 
         * @param {RestUpdateNote} restUpdateNote 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateNote(restUpdateNote: RestUpdateNote, options?: any): AxiosPromise<ResponseUpdateNote> {
            return localVarFp.updateNote(restUpdateNote, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UpdateNoteApi - interface
 * @export
 * @interface UpdateNoteApi
 */
export interface UpdateNoteApiInterface {
    /**
     * 
     * @param {RestUpdateNote} restUpdateNote 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpdateNoteApiInterface
     */
    updateNote(restUpdateNote: RestUpdateNote, options?: AxiosRequestConfig): AxiosPromise<ResponseUpdateNote>;

}

/**
 * UpdateNoteApi - object-oriented interface
 * @export
 * @class UpdateNoteApi
 * @extends {BaseAPI}
 */
export class UpdateNoteApi extends BaseAPI implements UpdateNoteApiInterface {
    /**
     * 
     * @param {RestUpdateNote} restUpdateNote 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UpdateNoteApi
     */
    public updateNote(restUpdateNote: RestUpdateNote, options?: AxiosRequestConfig) {
        return UpdateNoteApiFp(this.configuration).updateNote(restUpdateNote, options).then((request) => request(this.axios, this.basePath));
    }
}



